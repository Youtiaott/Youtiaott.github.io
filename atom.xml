<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YoutiaoのBlog</title>
  
  <subtitle>我们都在奔赴各自不同的人生</subtitle>
  <link href="https://youtiaott.github.io/atom.xml" rel="self"/>
  
  <link href="https://youtiaott.github.io/"/>
  <updated>2022-01-27T08:53:59.441Z</updated>
  <id>https://youtiaott.github.io/</id>
  
  <author>
    <name>Youtiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring注解</title>
    <link href="https://youtiaott.github.io/2022/01/27/Spring%E6%B3%A8%E8%A7%A3/"/>
    <id>https://youtiaott.github.io/2022/01/27/Spring%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-01-27T07:22:40.000Z</published>
    <updated>2022-01-27T08:53:59.441Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h1><h3 id="spring注解使用时必须在applicationContext-xml配置文件中配置组件扫描，告诉spring哪里有注解"><a href="#spring注解使用时必须在applicationContext-xml配置文件中配置组件扫描，告诉spring哪里有注解" class="headerlink" title="spring注解使用时必须在applicationContext.xml配置文件中配置组件扫描，告诉spring哪里有注解"></a>spring注解使用时必须在applicationContext.xml配置文件中配置组件扫描，告诉spring哪里有注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package=&quot;&quot;中的内容就是你要spring扫描的包(及其子包)</span></span><br><span class="line"> &lt;context:component-scanbase-<span class="keyword">package</span>=<span class="string">&quot;com.yt&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>举个栗子！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span> 这个注解跟下面的&lt;bean&gt;标签效果等同</span><br></pre></td></tr></table></figure><ul><li>&lt;bean name=”userDao” class=”com.yt.dao.impl.UserDaoImpl”</li></ul><h3 id="部分注解："><a href="#部分注解：" class="headerlink" title="部分注解："></a>部分注解：</h3><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F5eaeacfc920ff15ca98c01dcf00674d3.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1645860949&t=9edff5e4495b0b65fd10f4070714b079"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">引用注入：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照数据类型从容器进行匹配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照id值从spring容器中进行匹配，但要和 @Autowired 一起使用</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Resource相当于@Autowired+@Qualifier，9以上jdk需要导坐标</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDao&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//注解方式不用set方法直接注入</span></span><br><span class="line">    <span class="comment">/*public void setUserDao(UserDao userDao) &#123;</span></span><br><span class="line"><span class="comment">        this.userDao = userDao;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">普通属性注入：</span><br><span class="line">    <span class="meta">@Value(&quot;油条&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h1 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h1><ul><li><p>@Configuration<br>作用:指定当前类是一个配置类.<br>当配置类当做AnnotationConfigApplicationContext对象创建的参数时,该注解可以不写.这时它就是一个普通类,但是传入AnnotationConfigApplicationContext的时候spring会自动把它变成配置类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConFiguration.class);</span><br><span class="line">        UserService userService = app.getBean(UserService.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>@ComponentScan<br>作用:指定创建容器时要扫描的包.使用此注解等同于在XML配置了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;com&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>@Bean<br>作用:用于把当前方法的返回值作为bean对象存入spring的IOC容器中.<br>属性:name,用于指定bean的id,当不写时,默认值是当前方法的名称.</p></li><li><p>@Import<br>作用:用于导入其他的配置类.当前类就是主配置类了.<br>属性:value,用于指定其他配置类的字节码,当我们使用Import的注解之后,有Import注解的类就是父配置类,而导入的都是子配置类.</p></li><li><p>@PropertySource<br>作用:用于指定properties文件的位置.<br>属性:value,指定文件的名称和路径.</p></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节:"></a>细节:</h3><p> 当我们使用注解配置方法时,如果方法有数,spring框架会去spring容器中查找有没有可用的bean对象.查找的方式和autoried的注解是一样的.</p><h2 id="一个栗子："><a href="#一个栗子：" class="headerlink" title="一个栗子："></a>一个栗子：</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//标志该类是spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//配置组件扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yt&quot;)</span></span><br><span class="line"><span class="comment">//加载jdbc.properties到spring容器中</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConFiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过@Value去spring容器寻找键值对将值注入</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span> <span class="comment">//Spring会将当前方法返回值以指定名称存储到spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Spring" scheme="https://youtiaott.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>利用反射调用接口实现类的某个方法</title>
    <link href="https://youtiaott.github.io/2022/01/27/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E6%9F%90%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>https://youtiaott.github.io/2022/01/27/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E6%9F%90%E4%B8%AA%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-27T06:39:53.000Z</published>
    <updated>2022-01-27T06:49:47.286Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">service接口：</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">service接口实现类：</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save(<span class="string">&quot;save running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main：</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">            UserService userService = app.getBean(UserService.class);</span><br><span class="line">            userService.save();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="为什么是获取接口，而不是接口的实现类呢，带着这个疑问我打开百度"><a href="#为什么是获取接口，而不是接口的实现类呢，带着这个疑问我打开百度" class="headerlink" title="为什么是获取接口，而不是接口的实现类呢，带着这个疑问我打开百度"></a>为什么是获取接口，而不是接口的实现类呢，带着这个疑问我打开百度</h2><ul><li><p>1.用接口的好处就是可扩展，以后如果有新的实现了，可以在不改变现在的代码的情况下在写一个实现类，从而达到要实现的目的</p></li><li><p>2.只需要把我要调用的类名,方法名传给调用类就行了,这样的话只需要一个调用类.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="spring" scheme="https://youtiaott.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基本配置</title>
    <link href="https://youtiaott.github.io/2022/01/24/Spring%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://youtiaott.github.io/2022/01/24/Spring%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2022-01-24T13:10:26.000Z</published>
    <updated>2022-01-24T14:26:49.171Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring一般配置："><a href="#Spring一般配置：" class="headerlink" title="Spring一般配置："></a>Spring一般配置：</h1><h2 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.5.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2.创建对象"></a>2.创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoimpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save,running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContextapp = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userdao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userdao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置applicationContext-xml文件"><a href="#3-配置applicationContext-xml文件" class="headerlink" title="3.配置applicationContext.xml文件"></a>3.配置applicationContext.xml文件</h2><h3 id="3-1-scope属性"><a href="#3-1-scope属性" class="headerlink" title="3.1 scope属性"></a>3.1 scope属性</h3><ul><li><p>singleton(默认值):单例对象.被标识为单例的对象在spring容器中只会存在一个实例,加载”applicationContext.xml”配置文件时就会把对象创建</p></li><li><p>prototype:被标识为多例的对象,使用 getBean()方法 才会创建对象.每次创建都是新的对象.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;bean&gt;:使用该元素描述需要被spring容器管理的对象</span></span><br><span class="line"><span class="comment">            class属性：被管理对象完整的类名</span></span><br><span class="line"><span class="comment">            name：给被管理对象起个名字，获得对象时根据该名称获取对象。</span></span><br><span class="line"><span class="comment">            可以重复，可以使用特殊字符</span></span><br><span class="line"><span class="comment">            id属性：与name一样，名称不可重复，不能使用特殊字符</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--无参构造创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yt.dao.impl.UserDaoimpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-生命周期属性"><a href="#3-2-生命周期属性" class="headerlink" title="3.2 生命周期属性"></a>3.2 生命周期属性</h3></li><li><p>init-method:告知spring对象创建后立刻执行初始化方法</p></li><li><p>destroy-method:Spring容器销毁之前使用该方法<br><img src="https://img-blog.csdn.net/20180625233223663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODE4NjI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h1 id="Spring创建对象的三种方式"><a href="#Spring创建对象的三种方式" class="headerlink" title="Spring创建对象的三种方式"></a>Spring创建对象的三种方式</h1><h4 id="1-空参构造：见3-1"><a href="#1-空参构造：见3-1" class="headerlink" title="1.空参构造：见3.1"></a>1.空参构造：见3.1</h4><h4 id="2-静态工厂-了解"><a href="#2-静态工厂-了解" class="headerlink" title="2.静态工厂(了解)"></a>2.静态工厂(了解)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂静态创建--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yt.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUerDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUerDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoimpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-实例工厂-了解"><a href="#3-实例工厂-了解" class="headerlink" title="3.实例工厂(了解)"></a>3.实例工厂(了解)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂实例创建--&gt;</span></span><br><span class="line">  //先配置工厂，创建工厂</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yt.factory.DynamicFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  //再到工厂拿对应的对象</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoimpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring注入的方式"><a href="#Spring注入的方式" class="headerlink" title="Spring注入的方式"></a>Spring注入的方式</h2><h3 id="1-set方式注入法"><a href="#1-set方式注入法" class="headerlink" title="1.set方式注入法"></a>1.set方式注入法</h3><h4 id="给-setUserDao-UserDao-userdao）方法注入userdao参数"><a href="#给-setUserDao-UserDao-userdao）方法注入userdao参数" class="headerlink" title="给 setUserDao(UserDao userdao）方法注入userdao参数"></a>给 setUserDao(UserDao userdao）方法注入userdao参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userdao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userdao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        name:表示set方法,u要小写</span></span><br><span class="line"><span class="comment">        ref:将要注入的对象，如果是class对象就用ref，如果是基本数据类型用value；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yt.dao.impl.UserDaoimpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yt.Service.impl.UserServiceimpl&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><font color="pink">第一次接触到spring感觉学起来很吃力，教学视频反复看了好几遍才能看懂 - -</font></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Spring" scheme="https://youtiaott.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Filter</title>
    <link href="https://youtiaott.github.io/2022/01/23/Filter/"/>
    <id>https://youtiaott.github.io/2022/01/23/Filter/</id>
    <published>2022-01-23T12:05:43.000Z</published>
    <updated>2022-01-23T12:45:34.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter(过滤器)"></a>Filter(过滤器)</h1><h4 id="Filter是一个接口，是对客户端访问资源的过滤，符合条件放行，不符合条件不放行，并且可以对目标资源访问前后进行逻辑处理"><a href="#Filter是一个接口，是对客户端访问资源的过滤，符合条件放行，不符合条件不放行，并且可以对目标资源访问前后进行逻辑处理" class="headerlink" title="Filter是一个接口，是对客户端访问资源的过滤，符合条件放行，不符合条件不放行，并且可以对目标资源访问前后进行逻辑处理"></a>Filter是一个接口，是对客户端访问资源的过滤，符合条件放行，不符合条件不放行，并且可以对目标资源访问前后进行逻辑处理</h4><h5 id="流程图如下"><a href="#流程图如下" class="headerlink" title="流程图如下"></a>流程图如下</h5><p><img src="https://img-blog.csdn.net/20180730175152255?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1emhpcWlhbmdfMTk5Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>自动登录</li><li>统一设置编码格式</li><li>访问权限控制</li><li>敏感字符过滤等<h1 id="Filter的方法"><a href="#Filter的方法" class="headerlink" title="Filter的方法"></a>Filter的方法</h1></li><li>init(Filterconfig)：代表filter对象初始化方法 filter对象创建时执行</li><li>doFilter(ServletRequest,ServletResponse,FilterChain)：代表filter执行过滤的核心方法，如果某资源在已经被配置到这个filter进行过滤的话，那么每次访问这个资源都会执行doFilter方法,在此方法中用<font color='red'> FilterChain.doFilter(request, response) </font>方法会放行本次拦截</li><li>destory()：代表是filter销毁方法 当filter对象销毁时执行该方法<h1 id="过滤器的配置"><a href="#过滤器的配置" class="headerlink" title="过滤器的配置"></a>过滤器的配置</h1><h4 id="在自定义的Filter类上使用注解"><a href="#在自定义的Filter类上使用注解" class="headerlink" title="在自定义的Filter类上使用注解"></a>在自定义的Filter类上使用注解</h4><h4 id="WebFilter-“-”"><a href="#WebFilter-“-”" class="headerlink" title="@WebFilter(“/*”)"></a>@WebFilter(“/*”)</h4><h4 id="public-class-FilterDemo"><a href="#public-class-FilterDemo" class="headerlink" title="public class FilterDemo"></a>public class FilterDemo</h4><h4 id="拦截具体的资源："><a href="#拦截具体的资源：" class="headerlink" title="拦截具体的资源："></a>拦截具体的资源：</h4></li><li>/indexjsp：只有访问indexjsp时才会被拦截。</li><li>目录拦截：（user/*：访问/use下的所有资源，都会被芒截</li><li>后缀名拦截：*jsp：访问后缀名为jsp的资源，都会被拦截</li><li>拦截所有：/*：访问所有资源，都会被拦截<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;CharsetFilter&quot;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &quot;/*&quot;,/* 通配符（*）表示对所有的web资源进行拦截 */</span></span><br><span class="line"><span class="meta">        initParams = &#123;</span></span><br><span class="line"><span class="meta">          @WebInitParam(name = &quot;charset&quot;, value = &quot;utf-8&quot;)/*这里可以放一些初始化的参数*/</span></span><br><span class="line"><span class="meta">        &#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h1><h4 id="实现接口，重写所有的方法"><a href="#实现接口，重写所有的方法" class="headerlink" title="实现接口，重写所有的方法"></a>实现接口，重写所有的方法</h4><h5 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yt.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns=&quot;/cg.html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response= (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        Object user = session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断user是否为null</span></span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户已登入</span></span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;&lt;script&gt;alert(&#x27;您没有登入！&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/yt1/cg.html&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Filter的执行逻辑"><a href="#Filter的执行逻辑" class="headerlink" title="Filter的执行逻辑"></a>Filter的执行逻辑</h1><ul><li><p>放行后访问对应资源，资源访问完成后，还会回到Filter中</p></li><li><p>如果回到Filter中，是重头执行还是执行放行后的逻辑</p></li><li><p>执行访问前逻辑—&gt;放行—&gt;访问资源—&gt;执行返回放行后的逻辑</p><h1 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h1><h4 id="一个web项目能配置多个filter，被称为过滤器链"><a href="#一个web项目能配置多个filter，被称为过滤器链" class="headerlink" title="一个web项目能配置多个filter，被称为过滤器链"></a>一个web项目能配置多个filter，被称为过滤器链</h4><h5 id="如下图"><a href="#如下图" class="headerlink" title="如下图"></a>如下图</h5><p><img src="https://img-blog.csdnimg.cn/20200121135405918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlWmhpWWluZ18=,size_16,color_FFFFFF,t_70"></p><h4 id="多个过滤器的执行顺序"><a href="#多个过滤器的执行顺序" class="headerlink" title="多个过滤器的执行顺序"></a>多个过滤器的执行顺序</h4></li><li><p>在web.xml中，filter执行顺序跟的顺序有关，先声明的先执行。</p></li><li><p>使用注解配置的话，filter的执行顺序跟名称的字母顺序有关，例如AFilter会比BFilter先执行。</p></li><li><p>如果既有在web.xml中声明的Filter，也有通过注解配置的Filter，那么会优先执行web.xml中配置的Filter。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="web" scheme="https://youtiaott.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>会话技术</title>
    <link href="https://youtiaott.github.io/2022/01/23/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"/>
    <id>https://youtiaott.github.io/2022/01/23/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</id>
    <published>2022-01-23T11:17:22.000Z</published>
    <updated>2022-01-23T12:45:34.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是会话技术？"><a href="#什么是会话技术？" class="headerlink" title="什么是会话技术？"></a>什么是会话技术？</h1><h4 id="为了实现某一功能，浏览器和服务器之见可能会产生多次请求和响应，从浏览器访问服务器开始，到最后访问结束，期间产生的多次请求和响应加在一起，称之为一次会话。"><a href="#为了实现某一功能，浏览器和服务器之见可能会产生多次请求和响应，从浏览器访问服务器开始，到最后访问结束，期间产生的多次请求和响应加在一起，称之为一次会话。" class="headerlink" title="为了实现某一功能，浏览器和服务器之见可能会产生多次请求和响应，从浏览器访问服务器开始，到最后访问结束，期间产生的多次请求和响应加在一起，称之为一次会话。"></a>为了实现某一功能，浏览器和服务器之见可能会产生多次请求和响应，从浏览器访问服务器开始，到最后访问结束，期间产生的多次请求和响应加在一起，称之为一次会话。</h4><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="会话技术分类"><a href="#会话技术分类" class="headerlink" title="会话技术分类"></a>会话技术分类</h1><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><h4 id="Cookie：将数据保存到客户端，以后每次请求都携带Cookie数据进行访问"><a href="#Cookie：将数据保存到客户端，以后每次请求都携带Cookie数据进行访问" class="headerlink" title="Cookie：将数据保存到客户端，以后每次请求都携带Cookie数据进行访问"></a>Cookie：将数据保存到客户端，以后每次请求都携带Cookie数据进行访问</h4><h4 id="Cookie-存活时间："><a href="#Cookie-存活时间：" class="headerlink" title="Cookie 存活时间："></a>Cookie 存活时间：</h4><ul><li><p>默认情况下，Cookie 存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁<br>setMaxAgeG(int seconds)：设置Cookie存活时间</p></li><li><p>正数：将Cookie写在入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</p></li><li><p>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则 Cookie被销毁</p></li><li><p>零：删除对应 Cookie</p></li></ul><p> 代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">服务端  ：</span><br><span class="line"></span><br><span class="line">&gt; Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);<span class="comment">//创建cookie对象</span></span><br><span class="line"></span><br><span class="line">&gt; cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);  <span class="comment">//设置存活时间，1周 7天</span></span><br><span class="line"></span><br><span class="line">&gt; response.addCookie(cookie);<span class="comment">//发送cookie到客户端</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cookie[ ] cookies = request.getCookies();<span class="comment">//获取cookie数组</span></span><br><span class="line"><span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">             <span class="comment">//获取cookie值与名称</span></span><br><span class="line">             String value = cookie.getValue();</span><br><span class="line">             String name = cookie.getName();</span><br><span class="line">             System.out.println(name+<span class="string">&quot;：&quot;</span>+value);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><h4 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h4><h4 id="将数据保存到服务端-session是基于cookie实现的，用户第一次访问服务器，session会给客户端发送一个cookie的id，在session被销毁前，保证客户端与服务器的一次连接多次请求过程中的session是同一个"><a href="#将数据保存到服务端-session是基于cookie实现的，用户第一次访问服务器，session会给客户端发送一个cookie的id，在session被销毁前，保证客户端与服务器的一次连接多次请求过程中的session是同一个" class="headerlink" title="将数据保存到服务端,session是基于cookie实现的，用户第一次访问服务器，session会给客户端发送一个cookie的id，在session被销毁前，保证客户端与服务器的一次连接多次请求过程中的session是同一个"></a>将数据保存到服务端,session是基于cookie实现的，用户第一次访问服务器，session会给客户端发送一个cookie的id，在session被销毁前，保证客户端与服务器的一次连接多次请求过程中的session是同一个</h4><h4 id="session-钝化、活化："><a href="#session-钝化、活化：" class="headerlink" title="session 钝化、活化："></a>session 钝化、活化：</h4><h4 id="服务器重启后，Session中的数据是否还在？"><a href="#服务器重启后，Session中的数据是否还在？" class="headerlink" title="服务器重启后，Session中的数据是否还在？"></a>服务器重启后，Session中的数据是否还在？</h4><ul><li>钝化：在服务器正常关闭后，Tomcat会自动将 Session数据号入硬盘的文件中</li><li>活化：再次启动服务器后，从文件中加载数据到Session中<h4 id="Seesion-销毁："><a href="#Seesion-销毁：" class="headerlink" title="Seesion 销毁："></a>Seesion 销毁：</h4></li><li>默认情况下，无操作，30分钟自动销毁<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">‹session-config&gt;</span><br><span class="line">‹session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt; session-config&gt;</span><br></pre></td></tr></table></figure></li><li>调用 Session对象的 invalidate( )方法<h1 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h1><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4></li><li>Cookie 和 Session 都是来完成一次会话内多次请求间数据共享的</li><li>存储位置：Cookie 是将数据存储在客户端，Session 是将存储在服务端</li></ul><h4 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h4><ul><li>Cookie 不安全，Session 安全<h4 id="数据大小："><a href="#数据大小：" class="headerlink" title="数据大小："></a>数据大小：</h4></li><li>Cookie 最大3KB, Session 无大小限制<h4 id="存情时间："><a href="#存情时间：" class="headerlink" title="存情时间："></a>存情时间：</h4></li><li>Cookie 可以长期存储，Session 默认30分钟<h4 id="服务器性能："><a href="#服务器性能：" class="headerlink" title="服务器性能："></a>服务器性能：</h4></li><li>Cookie 不占服务器资源，Session 占用服务器资源</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="web" scheme="https://youtiaott.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Request和Response</title>
    <link href="https://youtiaott.github.io/2022/01/23/Request%E5%92%8CResponse/"/>
    <id>https://youtiaott.github.io/2022/01/23/Request%E5%92%8CResponse/</id>
    <published>2022-01-23T06:29:42.000Z</published>
    <updated>2022-01-23T12:45:35.629Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h1><h4 id="Request-对象用于接收客户端浏览器提交的数据"><a href="#Request-对象用于接收客户端浏览器提交的数据" class="headerlink" title="Request 对象用于接收客户端浏览器提交的数据"></a>Request 对象用于接收客户端浏览器提交的数据</h4><h4 id="获取请求参数的方法："><a href="#获取请求参数的方法：" class="headerlink" title="获取请求参数的方法："></a>获取请求参数的方法：</h4><ul><li>Map&lt;String, String[ ]&gt; getParameterMap()：获取所有参数Map集合</li><li>String[ ] getParameterValues (String name)：根据名称获取参数值（数组）</li><li>String getParameter(String name)：根据名称获取参数值（单个值）</li></ul><h4 id="获取动态虚拟目录："><a href="#获取动态虚拟目录：" class="headerlink" title="获取动态虚拟目录："></a>获取动态虚拟目录：</h4><h4 id="String-ContextPath-request-getContextPath"><a href="#String-ContextPath-request-getContextPath" class="headerlink" title="String ContextPath = request.getContextPath();"></a>String ContextPath = request.getContextPath();</h4><blockquote><p>代码演示：</p></blockquote><blockquote><p>String ContextPath = req.getContextPath();//动态获取虚拟目录(项目包名)<br>resp.sendRedirect(ContextPath+”/resp2”);</p></blockquote><h4 id="request的域方法："><a href="#request的域方法：" class="headerlink" title="request的域方法："></a>request的域方法：</h4><ul><li><p>void setAttribute(String name, Object value)：用来存储一个对象，也可以称之为存储一个域属性，例如：servletContext.setAttribute(“xxx”, “XXX”)，在request中保存了一个域属性，域属性名称为xxx，域属性的值为XXX。请注意，如果多次调用该方法，并且使用相同的name，那么会覆盖上一次的值，这一特性与Map相同；</p></li><li><p>Object getAttribute(String name)：用来获取request中的数据，当前在获取之前需要先去存储才行，例如：String value = (String)request.getAttribute(“xxx”);，获取名为xxx的域属性；</p></li><li><p>void removeAttribute(String name)：用来移除request中的域属性，如果参数name指定的域属性不存在，那么本方法什么都不做；</p></li><li><p>Enumeration getAttributeNames()：获取所有域属性的名称</p></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Request：-1"><a href="#Request：-1" class="headerlink" title="Request："></a>Request：</h1><h4 id="Response-对象的功能是将服务器端的数据发送到客户端浏览器。"><a href="#Response-对象的功能是将服务器端的数据发送到客户端浏览器。" class="headerlink" title="Response 对象的功能是将服务器端的数据发送到客户端浏览器。"></a>Response 对象的功能是将服务器端的数据发送到客户端浏览器。</h4><ul><li>PrintWriter out = response.getWriter()：获取字符流</li><li>ServletOutputStreamout = response.getOutputStream()：获取字节流<h4 id="注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse-getWriter-，要么使用response-getOutputStream-，但不能同时使用这两个流。不然会抛出illegalStateException异常。"><a href="#注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse-getWriter-，要么使用response-getOutputStream-，但不能同时使用这两个流。不然会抛出illegalStateException异常。" class="headerlink" title="注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse.getWriter()，要么使用response.getOutputStream()，但不能同时使用这两个流。不然会抛出illegalStateException异常。"></a>注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse.getWriter()，要么使用response.getOutputStream()，但不能同时使用这两个流。不然会抛出illegalStateException异常。</h4><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1></li></ul><h1 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title=" 请求转发和重定向 "></a><font color='pink'> 请求转发和重定向 </font></h1><h4 id="请求转发："><a href="#请求转发：" class="headerlink" title="请求转发："></a>请求转发：</h4><ul><li><p> request.getRequestDispatcher(“/res2”).forward(req,resp)</p></li><li><p>特点：转发只能发生在当前Web应用下，浏览器发出了1次请求，得到了1次响应。源组件和目标组件共享request和response中的数据,地址栏地址不会发生变化。</p></li></ul><blockquote><p>代码演示：<br>student stu = new student(“油条”, 20);<br>//将数据存到request中<br>req.setAttribute(“yt”,stu);<br>//请求转发<br>req.getRequestDispatcher(“/res2”).forward(req,resp);</p></blockquote><blockquote><p>//获取请求转发间共享的数据<br>Object yt = req.getAttribute(“yt”);</p></blockquote><h4 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h4><ul><li>response.sendRedirect(ContextPath+”/resp2”);</li><li>特点：重定向是服务器通知浏览器去访问另一个地址，即再发出另一个请求。(两次请求)<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4></li><li>重定向两次请求，转发一次请求</li><li>重定向地址栏的地址变化，转发地址不变</li><li>重定向可以访问外部网站 转发只能访问内部资源</li><li>重定向由于是发送新的请求，因而上次请求中的数据将随之丢失，也就是说，重定向只实现url的跳转，不携带数据，转发则可以携带数据实现数据共享。<h1 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h1><h4 id="response："><a href="#response：" class="headerlink" title="response："></a>response：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置response返回数据的编码格式</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定浏览器使用什么编码解析</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/htmlcharset=UTF-8&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="response"><a href="#response" class="headerlink" title="response:"></a>response:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="web" scheme="https://youtiaott.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="https://youtiaott.github.io/2022/01/23/Servlet/"/>
    <id>https://youtiaott.github.io/2022/01/23/Servlet/</id>
    <published>2022-01-23T05:49:30.000Z</published>
    <updated>2022-01-24T14:23:25.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Servlet简介"><a href="#一、Servlet简介" class="headerlink" title="一、Servlet简介"></a>一、Servlet简介</h1><h4 id="Servlet是sun公司提供的一门用于开发动态web资源的技术。"><a href="#Servlet是sun公司提供的一门用于开发动态web资源的技术。" class="headerlink" title="Servlet是sun公司提供的一门用于开发动态web资源的技术。"></a>Servlet是sun公司提供的一门用于开发动态web资源的技术。</h4><h4 id="Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源-即开发一个Java程序向浏览器输出数据-，需要完成以下2个步骤："><a href="#Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源-即开发一个Java程序向浏览器输出数据-，需要完成以下2个步骤：" class="headerlink" title="Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源(即开发一个Java程序向浏览器输出数据)，需要完成以下2个步骤："></a>Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源(即开发一个Java程序向浏览器输出数据)，需要完成以下2个步骤：</h4><h4 id="1、编写一个Java类，实现servlet接口。"><a href="#1、编写一个Java类，实现servlet接口。" class="headerlink" title="1、编写一个Java类，实现servlet接口。"></a>1、编写一个Java类，实现servlet接口。</h4><h4 id="2、把开发好的Java类部署到web服务器中。"><a href="#2、把开发好的Java类部署到web服务器中。" class="headerlink" title="2、把开发好的Java类部署到web服务器中。"></a>2、把开发好的Java类部署到web服务器中。</h4><h4 id="按照一种约定俗成的称呼习惯，通常我们也把实现了servlet接口的java程序，称之为Servlet"><a href="#按照一种约定俗成的称呼习惯，通常我们也把实现了servlet接口的java程序，称之为Servlet" class="headerlink" title="按照一种约定俗成的称呼习惯，通常我们也把实现了servlet接口的java程序，称之为Servlet"></a>按照一种约定俗成的称呼习惯，通常我们也把实现了servlet接口的java程序，称之为Servlet</h4><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="二、Servlet的运行过程"><a href="#二、Servlet的运行过程" class="headerlink" title="二、Servlet的运行过程"></a>二、Servlet的运行过程</h1><p><img src="https://img-blog.csdn.net/20160815205011516?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><h4 id="Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后："><a href="#Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后：" class="headerlink" title="Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后："></a>Servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后：</h4><h4 id="①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步。"><a href="#①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步。" class="headerlink" title="①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步。"></a>①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步。</h4><h4 id="②装载并创建该Servlet的一个实例对象。"><a href="#②装载并创建该Servlet的一个实例对象。" class="headerlink" title="②装载并创建该Servlet的一个实例对象。"></a>②装载并创建该Servlet的一个实例对象。</h4><h4 id="③调用Servlet实例对象的init-方法。"><a href="#③调用Servlet实例对象的init-方法。" class="headerlink" title="③调用Servlet实例对象的init()方法。"></a>③调用Servlet实例对象的init()方法。</h4><h4 id="④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service-方法并将请求和响应对象作为参数传递进去。"><a href="#④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service-方法并将请求和响应对象作为参数传递进去。" class="headerlink" title="④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。"></a>④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去。</h4><h4 id="⑤WEB应用程序被停止或重新启动之前，Servlet将卸载Servlet，并在卸载之前调用Servlet的destroy-方法。"><a href="#⑤WEB应用程序被停止或重新启动之前，Servlet将卸载Servlet，并在卸载之前调用Servlet的destroy-方法。" class="headerlink" title="⑤WEB应用程序被停止或重新启动之前，Servlet将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。"></a>⑤WEB应用程序被停止或重新启动之前，Servlet将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。</h4><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="三、Servlet的生命周期"><a href="#三、Servlet的生命周期" class="headerlink" title="三、Servlet的生命周期"></a>三、Servlet的生命周期</h1><h4 id="1-加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象"><a href="#1-加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象" class="headerlink" title="1.加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象"></a>1.加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</h4><h4 id="2-初始化：在Servlet实例化之后，容器将调用servlet的init0方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次"><a href="#2-初始化：在Servlet实例化之后，容器将调用servlet的init0方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次" class="headerlink" title="2.初始化：在Servlet实例化之后，容器将调用servlet的init0方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次"></a>2.初始化：在Servlet实例化之后，容器将调用servlet的init0方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次</h4><h4 id="3-请求处理：每次请求-访问-servlet时，servlet容器都会调用Servlet的service-方法对请求进行处理。"><a href="#3-请求处理：每次请求-访问-servlet时，servlet容器都会调用Servlet的service-方法对请求进行处理。" class="headerlink" title="3.请求处理：每次请求(访问)servlet时，servlet容器都会调用Servlet的service( )方法对请求进行处理。"></a>3.请求处理：每次请求(访问)servlet时，servlet容器都会调用Servlet的service( )方法对请求进行处理。</h4><h4 id="4-服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy方法完成资源的释放。在destroy方法调用之后，容器会释放这个Servlet实例，该实例随后会被java的垃圾收集器所回收。"><a href="#4-服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy方法完成资源的释放。在destroy方法调用之后，容器会释放这个Servlet实例，该实例随后会被java的垃圾收集器所回收。" class="headerlink" title="4.服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy方法完成资源的释放。在destroy方法调用之后，容器会释放这个Servlet实例，该实例随后会被java的垃圾收集器所回收。"></a>4.服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy方法完成资源的释放。在destroy方法调用之后，容器会释放这个Servlet实例，该实例随后会被java的垃圾收集器所回收。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="web" scheme="https://youtiaott.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>About</title>
    <link href="https://youtiaott.github.io/2022/01/23/About/"/>
    <id>https://youtiaott.github.io/2022/01/23/About/</id>
    <published>2022-01-23T04:00:00.000Z</published>
    <updated>2022-01-27T06:41:43.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="感谢来访"><a href="#感谢来访" class="headerlink" title="感谢来访"></a><font color="pink">感谢来访</font></h2><h4 id="这个博客是基于hexo框架和github搭建的"><a href="#这个博客是基于hexo框架和github搭建的" class="headerlink" title="这个博客是基于hexo框架和github搭建的"></a>这个博客是基于hexo框架和github搭建的</h4><h4 id="网站主要用于记录一些学习笔记"><a href="#网站主要用于记录一些学习笔记" class="headerlink" title="网站主要用于记录一些学习笔记"></a>网站主要用于记录一些学习笔记</h4><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h5 id="tips：内容有点乱，可以通过右上角的目录浏览"><a href="#tips：内容有点乱，可以通过右上角的目录浏览" class="headerlink" title="tips：内容有点乱，可以通过右上角的目录浏览"></a>tips：内容有点乱，可以通过右上角的目录浏览</h5><audio autoplay="autopaly" loop="loop" id="audios">    <source src="http://101.132.79.111/yt/mp3/clg.mp3 " type="audio/mp3" /></audio><script>// 将以下代码添加到js入口函数内即可// 这里使用了微信自带的WeixinJSBridgeReady事件document.addEventListener('WeixinJSBridgeReady', function() {    document.getElementById('audios').play()})</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
